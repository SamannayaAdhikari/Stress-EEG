function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double containing the accuracy as a
%       percentage. In the app, the Models pane displays this overall
%       accuracy score for each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 01-Jun-2023 13:40:11


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'T_Mean', 'T_Median', 'T_Variance', 'T_StandardDeviation', 'T_Skewness', 'T_Kurtosis', 'T_ZerocrossingRate', 'T_peaktopeak', 'T_HjorthActivity', 'T_HjorthMobility', 'T_HjorthComplexity', 'F_Mean', 'F_Median', 'F_Variance', 'F_StandardVariance', 'F_Skewness', 'F_Kurtosis', 'F_Delta', 'F_Theta', 'F_Alpha', 'F_Beta', 'F_Gamma', 'F_PeakFrequency', 'F_ThetaAlpha', 'F_BetaAlpha', 'F_ThetaBeta', 'F_GammaDelta', 'F_ThetaAlphaBeta', 'F_ThetaAlphaAlphaBeta', 'F_GammaBetaDeltaAlpha'};
predictors = inputTable(:, predictorNames);
response = inputTable.lebel;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Feature Ranking and Selection
% Replace Inf/-Inf values with NaN to prepare data for normalization
predictors = standardizeMissing(predictors, {Inf, -Inf});
% Normalize data for feature ranking
predictorMatrix = normalize(predictors, "DataVariable", ~isCategoricalPredictor);
isAllPredictorsCategorical = all(isCategoricalPredictor);
if isAllPredictorsCategorical
    newPredictorMatrix = zeros(size(predictorMatrix));
    for i = 1:size(predictorMatrix, 2)
        newPredictorMatrix(:,i) = grp2idx(predictorMatrix{:,i});
    end
    predictorMatrix = newPredictorMatrix;
else
    predictorMatrix = table2array(predictorMatrix);
    responseVector = response;
end

% Rank features using ReliefF algorithm
featureIndex = relieff(...
    predictorMatrix, ...
    responseVector, ...
    10);
numFeaturesToKeep = 25;
includedPredictorNames = predictors.Properties.VariableNames(featureIndex(1:numFeaturesToKeep));
predictors = predictors(:,includedPredictorNames);
isCategoricalPredictor = isCategoricalPredictor(featureIndex(1:numFeaturesToKeep));

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
    predictors, ...
    response, ...
    'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', 1, ...
    'DistanceWeight', 'Equal', ...
    'Standardize', true, ...
    'ClassNames', [0; 1]);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
featureSelectionFcn = @(x) x(:,includedPredictorNames);
knnPredictFcn = @(x) predict(classificationKNN, x);
trainedClassifier.predictFcn = @(x) knnPredictFcn(featureSelectionFcn(predictorExtractionFcn(x)));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'F_Alpha', 'F_Beta', 'F_BetaAlpha', 'F_Delta', 'F_Gamma', 'F_GammaBetaDeltaAlpha', 'F_GammaDelta', 'F_Kurtosis', 'F_Mean', 'F_Median', 'F_PeakFrequency', 'F_Skewness', 'F_StandardVariance', 'F_Theta', 'F_ThetaAlpha', 'F_ThetaAlphaAlphaBeta', 'F_ThetaAlphaBeta', 'F_ThetaBeta', 'F_Variance', 'T_HjorthActivity', 'T_HjorthComplexity', 'T_HjorthMobility', 'T_Kurtosis', 'T_Mean', 'T_Median', 'T_Skewness', 'T_StandardDeviation', 'T_Variance', 'T_ZerocrossingRate', 'T_peaktopeak'};
trainedClassifier.ClassificationKNN = classificationKNN;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2022b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'T_Mean', 'T_Median', 'T_Variance', 'T_StandardDeviation', 'T_Skewness', 'T_Kurtosis', 'T_ZerocrossingRate', 'T_peaktopeak', 'T_HjorthActivity', 'T_HjorthMobility', 'T_HjorthComplexity', 'F_Mean', 'F_Median', 'F_Variance', 'F_StandardVariance', 'F_Skewness', 'F_Kurtosis', 'F_Delta', 'F_Theta', 'F_Alpha', 'F_Beta', 'F_Gamma', 'F_PeakFrequency', 'F_ThetaAlpha', 'F_BetaAlpha', 'F_ThetaBeta', 'F_GammaDelta', 'F_ThetaAlphaBeta', 'F_ThetaAlphaAlphaBeta', 'F_GammaBetaDeltaAlpha'};
predictors = inputTable(:, predictorNames);
response = inputTable.lebel;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
KFolds = 5;
cvp = cvpartition(response, 'KFold', KFolds);
% Initialize the predictions to the proper sizes
validationPredictions = response;
numObservations = size(predictors, 1);
numClasses = 2;
validationScores = NaN(numObservations, numClasses);
for fold = 1:KFolds
    trainingPredictors = predictors(cvp.training(fold), :);
    trainingResponse = response(cvp.training(fold), :);
    foldIsCategoricalPredictor = isCategoricalPredictor;

    % Feature Ranking and Selection
    % Replace Inf/-Inf values with NaN to prepare data for normalization
    trainingPredictors = standardizeMissing(trainingPredictors, {Inf, -Inf});
    % Normalize data for feature ranking
    predictorMatrix = normalize(trainingPredictors, "DataVariable", ~foldIsCategoricalPredictor);
    isAllPredictorsCategorical = all(foldIsCategoricalPredictor);
    if isAllPredictorsCategorical
        newPredictorMatrix = zeros(size(predictorMatrix));
        for i = 1:size(predictorMatrix, 2)
            newPredictorMatrix(:,i) = grp2idx(predictorMatrix{:,i});
        end
        predictorMatrix = newPredictorMatrix;
    else
        predictorMatrix = table2array(predictorMatrix);
        responseVector = trainingResponse;
    end

    % Rank features using ReliefF algorithm
    featureIndex = relieff(...
        predictorMatrix, ...
        responseVector, ...
        10);
    numFeaturesToKeep = 25;
    includedPredictorNames = trainingPredictors.Properties.VariableNames(featureIndex(1:numFeaturesToKeep));
    trainingPredictors = trainingPredictors(:,includedPredictorNames);
    foldIsCategoricalPredictor = foldIsCategoricalPredictor(featureIndex(1:numFeaturesToKeep));

    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    classificationKNN = fitcknn(...
        trainingPredictors, ...
        trainingResponse, ...
        'Distance', 'Euclidean', ...
        'Exponent', [], ...
        'NumNeighbors', 1, ...
        'DistanceWeight', 'Equal', ...
        'Standardize', true, ...
        'ClassNames', [0; 1]);

    % Create the result struct with predict function
    featureSelectionFcn = @(x) x(:,includedPredictorNames);
    knnPredictFcn = @(x) predict(classificationKNN, x);
    validationPredictFcn = @(x) knnPredictFcn(featureSelectionFcn(x));

    % Add additional fields to the result struct

    % Compute validation predictions
    validationPredictors = predictors(cvp.test(fold), :);
    [foldPredictions, foldScores] = validationPredictFcn(validationPredictors);

    % Store predictions in the original order
    validationPredictions(cvp.test(fold), :) = foldPredictions;
    validationScores(cvp.test(fold), :) = foldScores;
end

% Compute validation accuracy
correctPredictions = (validationPredictions == response);
isMissing = isnan(response);
correctPredictions = correctPredictions(~isMissing);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
trainedClassifier.result=validationAccuracy

